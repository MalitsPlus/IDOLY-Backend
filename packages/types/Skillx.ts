// Generated by skillSchemaToTSTypes.js
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type EffectWithTarget =
  | EffectTargetChart
  | EffectTargetCharacterWithLen
  | EffectTargetCharacterWithoutLen
export type EffectChart =
  | EffectScoreGet
  | EffectScoreGetByStaEff
  | EffectScoreGetByTrigExtra
export type EffectScoreGetTyp =
  | 'score_get_by_less_fan_amount'
  | 'score_get_by_more_fan_engage'
  | 'score_get_by_more_combo_count'
  | 'score_get_by_skill_activation_count'
  | 'score_get_by_strength_effect_count'
  | 'score_get_by_more_stamina_use'
  | 'score_get_by_more_stamina'
  | 'score_get_by_less_stamina'
  | 'score_get_and_stamina_consumption_by_more_stamina_use'
  | 'score_get'
export type EffectCharacterLengthLevelTyp =
  | 'vocal_up'
  | 'dance_up'
  | 'visual_up'
  | 'skill_score_up'
  | 'active_skill_score_up'
  | 'passive_skill_score_up'
  | 'special_skill_score_up'
  | 'score_up'
  | 'beat_score_up'
  | 'combo_score_up'
  | 'skill_success_rate_up'
  | 'tension_up'
  | 'critical_rate_up'
  | 'critical_bonus_permil_up'
  | 'stamina_consumption_reduction'
  | 'stamina_consumption_increase'
  | 'stamina_continuous_recovery'
  | 'audience_amount_reduction'
  | 'audience_amount_increase'
  | 'weakness_effect_prevention'
  | 'vocal_down'
  | 'dance_down'
  | 'visual_down'
  | 'vocal_boost'
  | 'dance_boost'
  | 'visual_boost'
  | 'active_score_multiplier_add'
export type EffectCharacterWithLength =
  | EffectCharacterLengthLevel
  | EffectCharacterLengthOnly
export type EffectCharacterLengthOnlyTyp =
  | 'skill_impossible'
  | 'combo_continuation'
export type TargetCharacterWithCount = TargetCharacter & {
  cnt: number
  [k: string]: unknown
}
export type TargetCharacter =
  | TargetCharacterSpecial
  | TargetCharacterWithProps
  | TargetCharacterWithType
  | TargetCharacterTrigger
  | TargetCharacterWithStatus
export type TargetCharacterSpecialType =
  | 'self'
  | 'all'
  | 'center'
  | 'neighbor'
  | 'opponent_same_position'
  | 'opponent_center'
export type TargetChPropsType =
  | 'vocal_higher'
  | 'dance_higher'
  | 'visual_higher'
  | 'stamina_higher'
  | 'vocal'
  | 'dance'
  | 'visual'
  | 'position_attribute_vocal'
  | 'position_attribute_visual'
  | 'stamina_lower'
export type TargetCharacterWithTypeType =
  | 'character_type'
  | 'opponent_character_type'
export type EffectCharacterWithoutLength =
  | EffectCharacterLevelOnly
  | EffectCharacterSimple
export type EffectCharacterLevelOnlyTyp =
  | 'fix_stamina_recovery'
  | 'target_stamina_recovery'
  | 'cool_time_reduction'
  | 'strength_effect_count_increase'
  | 'strength_effect_value_increase'
  | 'stamina_consumption'
export type EffectCharacterSimpleTyp =
  | 'weakness_effect_recovery'
  | 'weakness_effect_inversion'
  | 'strength_effect_migration_before_special_skill'
  | 'strength_effect_migration_before_active_skill'
  | 'strength_effect_erasing_all'

/**
 * Parsed skills format
 */
export interface TheRootMapping {
  [k: string]: EffectWithTarget
}
export interface EffectTargetChart {
  effect: EffectChart
  target: TargetChart
  owner: string
}
export interface EffectScoreGet {
  typ: EffectScoreGetTyp
  typ2: number
}
export interface EffectScoreGetByStaEff {
  typ: 'score_get_by_status_effect_type_grade'
  prt: EffectCharacterLengthLevelTyp
  lvl: number
}
export interface EffectScoreGetByTrigExtra {
  typ: 'score_get_by_trigger'
  lvl: number
  cond: TriggerCond
  condLvl: number
}
export interface TriggerCond {
  typ: 'combo'
  len: number
}
export interface TargetChart {
  typ: 'chart_dependence'
  [k: string]: unknown
}
export interface EffectTargetCharacterWithLen {
  effect: EffectCharacterWithLength
  target: TargetCharacterWithCount
  owner: string
}
export interface EffectCharacterLengthLevel {
  typ: EffectCharacterLengthLevelTyp
  lvl: number
  len: number
}
export interface EffectCharacterLengthOnly {
  typ: EffectCharacterLengthOnlyTyp
  len: number
}
export interface TargetCharacterSpecial {
  typ: TargetCharacterSpecialType
  [k: string]: unknown
}
export interface TargetCharacterWithProps {
  typ: TargetChPropsType
  [k: string]: unknown
}
export interface TargetCharacterWithType {
  typ: TargetCharacterWithTypeType
  typ2: number
  [k: string]: unknown
}
export interface TargetCharacterTrigger {
  typ: 'trigger'
  [k: string]: unknown
}
export interface TargetCharacterWithStatus {
  typ: 'status'
  typ2: EffectCharacterLengthLevelTyp
  [k: string]: unknown
}
export interface EffectTargetCharacterWithoutLen {
  effect: EffectCharacterWithoutLength
  target: TargetCharacterWithCount
  owner: string
}
export interface EffectCharacterLevelOnly {
  typ: EffectCharacterLevelOnlyTyp
  lvl: number
}
export interface EffectCharacterSimple {
  typ: EffectCharacterSimpleTyp
}
